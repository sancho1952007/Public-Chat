<!DOCTYPE html>
<html lang="en">

<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0, user-scalable=no">
    <title>Public Chat - A free chat app for all</title>
    <!-- <script src="https://livejs.com/live.js"></script> -->

    <!-- SEO -->
    <meta name="keywords" content="public chat, chat app, free public chat app, chat will whole world">
    <meta name="description"
        content="Public Chat is a free chat site where everyone can chat at the same time on the same topic together!">

    <!-- Facebook Meta Tags -->
    <meta property="og:url" content="https://public-chat.sg-app.com/">
    <meta property="og:type" content="website">
    <meta property="og:title" content="Public Chat">
    <meta property="og:description"
        content="Public Chat is a free chat site where everyone can chat at the same time on the same topic together!">
    <meta property="og:image" content="https://public-chat.sg-app.com/images/og-image.png">

    <!-- Twitter Meta Tags -->
    <meta name="twitter:card" content="summary_large_image">
    <meta property="twitter:domain" content="public-chat.sg-app.com">
    <meta property="twitter:url" content="https://public-chat.sg-app.com/">
    <meta name="twitter:title" content="Public Chat">
    <meta name="twitter:description"
        content="Public Chat is a free chat site where everyone can chat at the same time on the same topic together!">
    <meta name="twitter:image" content="https://public-chat.sg-app.com/images/og-image.png">

    <!-- Meta Tags Generated via https://www.opengraph.xyz -->

    <link rel="manifest" href="/manifest.json">
    <link rel="stylesheet" href="/css/index.css">
    <meta name="theme-color" content="black">
    <script src="https://cdn.socket.io/4.7.5/socket.io.min.js"></script>
    <link rel="stylesheet" href="/css/index/<%= theme %>.css" id="theme-css">
    <script src="https://cdn.jsdelivr.net/npm/js-cookie@3.0.5/dist/js.cookie.min.js"></script>

    <!-- Privacy friendly analytics -->
    <script src="https://rybbit.sg-app.com/api/script.js" data-site-id="5" data-track-errors="true" defer></script>
</head>

<body>
    <div id="splash-screen">
        <img src="/images/icon-128x128.png" alt="">
        <b>Public Chat</b>
    </div>

    <!-- Extra options dialogue -->
    <div id="extras-dialogue">
        <div class="extras-option">
            <div style="width:100%;">
                Theme:
                <select id="select-theme" style="width:100%;padding:5px;">
                    <option value="auto" <%=theme=='auto' ? 'selected' : '' %>>Auto</option>
                    <option value="light" <%=theme=='light' ? 'selected' : '' %>>Light</option>
                    <option value="dark" <%=theme=='dark' ? 'selected' : '' %>>Dark</option>
                </select>
            </div>
        </div>
        <div class="extras-option" style="font-size:14px;">
            <div>
                <a href="https://github.com/sancho1952007/Public-Chat/" target="_blank">View Source Code On Github</a>
            </div>
        </div>
        <div class="extras-option" style="font-size:14px;">
            <div>
                Made With ❤️ by <a href="https://sancho1952007.github.io/" target="_blank">Sancho Godinho</a>
            </div>
        </div>
        <div class="extras-option" id="install-btn" style="cursor:pointer;display:none;">
            Install App
        </div>

    </div>

    <div id="container">
        <!-- In-Site header -->
        <div id="header">
            <!-- Left part of the header -->
            <div id="header-left">
                <div id="open-extras">
                    <img src="https://img.icons8.com/fluency-systems-filled/20/plus-math.png" alt="more-options" />
                </div>
            </div>

            <!-- Center part of the header -->
            <div id="header-center"><b>Public Chat</b></div>

            <!-- Right part of the header -->
            <div id="header-right">
                <div id="logout">Logout</div>
            </div>
        </div>

        <!-- All chats will be displayed inside this parent element -->
        <div id="chats"></div>

        <!-- Your chat area -->
        <div id="your-chat">
            <!-- Input for your chat -->
            <input maxlength="300" type="text" id="chat-input" placeholder="Share Your Thoughts..." autocomplete="off">

            <!-- Send button -->
            <div id="send-btn">
                <!-- SVG for send icon -->
                <svg xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" version="1.1"
                    width="256" height="256" viewBox="0 0 256 256" xml:space="preserve">
                    <defs>
                    </defs>
                    <g style="stroke: none; stroke-width: 0; stroke-dasharray: none; stroke-linecap: butt; stroke-linejoin: miter; stroke-miterlimit: 10; fill: none; fill-rule: nonzero; opacity: 1;"
                        transform="translate(1.4065934065934016 1.4065934065934016) scale(2.81 2.81)">
                        <polygon points="0,14.69 0,39.65 51,45 0,50.35 0,75.31 90,45 "
                            style="stroke: none; stroke-width: 1; stroke-dasharray: none; stroke-linecap: butt; stroke-linejoin: miter; stroke-miterlimit: 10; fill: rgb(0,0,0); fill-rule: nonzero; opacity: 1;"
                            transform="  matrix(1 0 0 1 0 0) " />
                    </g>
                </svg>
            </div>
        </div>
    </div>
</body>

<script>
    (() => {
        // Connec to backend socket.io server
        const socket = io.connect();

        // Assign required vaiables
        let MyID;
        let lastTS;
        let chatRequestSent = true;
        let firstRequest = true;
        let end = false;
        let lookForOnFocus = false;

        // Handle to get accurate body height and prevent any extra space considerations on screen
        document.querySelector('body').style.height = window.innerHeight + 'px';
        window.onresize = () => {
            document.querySelector('body').style.height = window.innerHeight + 'px';
        }

        // Handle Install PWA button
        let deferredPrompt;
        window.addEventListener('beforeinstallprompt', (e) => {
            e.preventDefault();
            deferredPrompt = e;
            document.querySelector('#install-btn').style.display = 'block';
        });

        document.querySelector('#install-btn').onclick = () => { deferredPrompt.prompt(); }

        // Reload the socket.io connection to include the cookies when user returns from google auth prompt
        window.onfocus = () => {
            if (lookForOnFocus == true) {
                // Check if user really loggedin by checking for id cookie set by server on login
                let myid = Cookies.get('id');
                setTimeout(() => {
                    socket.disconnect();
                    socket.connect();
                    if (myid != null) {
                        document.querySelectorAll('.chat.opp').forEach(chat => {
                            if (chat.getAttribute('user-id') != null && chat.getAttribute('user-id') == myid) {
                                chat.classList.remove('opp');
                                chat.classList.add('my');
                            }
                        });
                        lookForOnFocus = false;
                        document.querySelector('#chat-input').readOnly = false;
                    }
                }, 3000);
            } else {
                document.querySelector('#chat-input').readOnly = false;
            }
        }

        // Handle in case server requests logout
        socket.on('log-out', () => {
            Cookies.remove('id');
            Cookies.remove('session');
        });

        // Handle any message the server wants to display
        socket.on('display-message', (msg) => {
            alert(msg);
        });

        // Handle chats supplied by the server
        socket.on('chats', (chats) => {
            if (document.querySelector('#splash-screen') != null) {
                document.querySelector('#splash-screen').style.animation = 'fadeOut .5s linear';
                document.querySelector('#splash-screen').onanimationend = () => {
                    document.querySelector('#splash-screen').remove();
                }
            }

            // Check if user reached the end of chats
            if (chats.length <= 10) {
                end = true;
            }

            chatRequestSent = false;
            for (chat of chats) {
                if (document.getElementById(chat._id) == null) {
                    lastTS = chat.ts;
                    const chatDiv = document.createElement('div');
                    chatDiv.setAttribute('user-id', chat.userID);
                    chatDiv.id = chat._id;

                    MyID = Cookies.get('id');
                    const chatUser = document.createElement('div');
                    chatUser.className = 'person';

                    const chatUserName = document.createElement('div');
                    chatUserName.className = 'name';
                    chatUserName.innerText = chat.name;
                    chatUser.appendChild(chatUserName);

                    if (chat.extras.includes('verified')) {
                        const verifiedBadge = document.createElement('img');
                        verifiedBadge.className = 'verified-logo';
                        verifiedBadge.src = 'https://img.icons8.com/color/48/verified-account--v1.png'
                        chatUserName.appendChild(verifiedBadge);
                    }

                    if (MyID != null && chat.userID == MyID) {
                        chatDiv.className = 'chat my';
                    } else {
                        chatDiv.className = 'chat opp';
                    }

                    const chatContent = document.createElement('div');
                    chatContent.className = 'content';
                    chatContent.innerText = chat.content.text;

                    const chatTime = document.createElement('div');
                    chatTime.className = 'time';
                    chatTime.innerText = new Date(chat.ts).toLocaleString();

                    chatDiv.appendChild(chatUser);
                    chatDiv.appendChild(chatContent);
                    chatDiv.appendChild(chatTime);
                    document.querySelector('#chats').prepend(chatDiv);
                }

            }
            listenForLongtaps();

            if (firstRequest == true) {
                document.querySelector('#chats').scrollTop = document.querySelector('#chats').scrollHeight;
                firstRequest = false;
            }
        });

        // Check if user has scrolled to top to see older chats
        document.querySelector('#chats').onscroll = () => {
            if (document.querySelector('#chats').scrollTop < 400) {
                if (end == false) {
                    if (chatRequestSent == false) {
                        socket.emit('request-chats', lastTS);
                        chatRequestSent = true;
                    }
                }
            }
        }

        // Handle new chat received from server
        socket.on('chat', (chat) => {
            if (document.getElementById(chat._id) == null) {
                const chatDiv = document.createElement('div');
                chatDiv.setAttribute('user-id', chat.userID);
                chatDiv.id = chat._id;

                const chatUser = document.createElement('div');
                chatUser.className = 'person';
                // chatUser.innerText = chat.name;


                const chatUserName = document.createElement('div');
                chatUserName.className = 'name';
                chatUserName.innerText = chat.name;
                chatUser.appendChild(chatUserName);

                if (chat.extras.includes('verified')) {
                    const verifiedBadge = document.createElement('img');
                    verifiedBadge.className = 'verified-logo';
                    verifiedBadge.src = 'https://img.icons8.com/color/48/verified-account--v1.png'
                    chatUserName.appendChild(verifiedBadge);
                }

                MyID = Cookies.get('id');
                if (MyID != null && chat.userID == MyID) {
                    chatDiv.className = 'chat my';
                } else {
                    chatDiv.className = 'chat opp';
                }
                const chatContent = document.createElement('div');
                chatContent.className = 'content';
                chatContent.innerText = chat.content.text;

                const chatTime = document.createElement('div');
                chatTime.className = 'time';
                chatTime.innerText = new Date(chat.ts).toLocaleString();

                chatDiv.appendChild(chatUser);
                chatDiv.appendChild(chatContent);
                chatDiv.appendChild(chatTime);

                document.querySelector('#chats').appendChild(chatDiv);

                if ((document.querySelector('#chats').scrollHeight - 20) < (document.querySelector('#chats').scrollTop + document.querySelector('#chats').offsetHeight) + chatDiv.offsetHeight) {
                    document.querySelector('#chats').scrollTop = document.querySelector('#chats').scrollHeight;
                }
            }
            listenForLongtaps();
        });

        socket.on('update-message', data => {
            const elem = document.querySelector('#' + CSS.escape(data.id) + ' .content')
            if (elem != null) {
                elem.innerText = data.content.text;
            }
        });

        // Handle Open Extras (+) button on the top-left
        document.querySelector('#open-extras').onclick = () => {
            if (document.querySelector('#extras-dialogue').offsetHeight == 0) {
                document.querySelector('#extras-dialogue').style.border = '1px solid';
                document.querySelector('#extras-dialogue').style.height = document.querySelector('#extras-dialogue').scrollHeight + 'px';
                document.querySelector('#open-extras>img').style.rotate = '45deg';
            } else {
                document.querySelector('#extras-dialogue').style.border = '0px solid';
                document.querySelector('#extras-dialogue').style.height = '0px';
                document.querySelector('#open-extras>img').style.rotate = '0deg';
            }
        }

        // Handle change in theme powered by the <select> element
        document.querySelector('#select-theme').onchange = () => {
            const newTheme = document.querySelector('#select-theme').value;
            // Request to set theme cookie to the server as js-cookie is having problem with cookie expiration
            fetch('/set/theme/' + newTheme);
            const newMode = document.createElement('link');
            newMode.id = 'theme-css';
            newMode.rel = 'stylesheet';
            newMode.href = '/css/index/' + newTheme + '.css';
            newMode.onload = () => {
                try { document.querySelector('#theme-css').remove(); } catch { }
            }
            document.head.appendChild(newMode);
        }

        // Send message functon
        const doSend = () => {
            if (Cookies.get('session') != null) {
                const content = document.querySelector('#chat-input').value;
                if (content != null && content.trim() != '') {
                    if (content.match(/\b(?!https?:\/\/)[a-zA-Z0-9-]+\.[a-zA-Z]{2,}(?:\.[a-zA-Z]{2,})?\b/g) == null) {
                        socket.emit('message', content);
                        document.querySelector('#chat-input').value = '';
                    } else {
                        alert('Sorry, URLs are not allowed');
                    }
                }
            } else {
                let confirmation = confirm('Please Login With Google To Continue. Press OK To Continue.');
                if (confirmation != null && confirmation == true) {
                    window.open('/auth', '_blank');
                    lookForOnFocus = true;
                    document.querySelector('#chat-input').readOnly = true;
                }
            }
        }

        // Check if the send button was pressed
        document.querySelector('#send-btn').onclick = () => {
            doSend();
        }

        // Check if the enter key was pressed in the input and if it was, send the message
        document.querySelector('#chat-input').onkeydown = (key) => {
            if (key.keyCode == 13) {
                doSend();
            }
        }

        // Handle logout button click
        document.querySelector('#logout').onclick = () => {
            const confirmation = confirm('Are you sure you want to log out?');
            if (confirmation != null && confirmation == true) {
                Cookies.remove('session');
                Cookies.remove('id');
            }
        }

        // Handle long taps to delete messages
        const listenForLongtaps = () => {
            document.querySelectorAll('.chat.my').forEach(elem => {
                elem.oncontextmenu = (e) => {
                    e.preventDefault();
                    const confirmation = confirm('Delete Message?');
                    if (confirmation != null && confirmation == true) {
                        socket.emit('delete', e.currentTarget.id);
                    }
                }
            });
        }
    })();
</script>

</html>